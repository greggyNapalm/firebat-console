#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
firebat.console
~~~~~~~~~~~~~~~

Helper script for Phantom load tool.
    * generate config files and input data.
    * runs test.
    * aggregate result data.
"""

import sys
from datetime import date, datetime
import argparse
import logging
import getpass

import yaml

from firebat.console.conf import make_conf 

def exit_err(msg):
    logger = logging.getLogger('firebat.console')
    logger.error(msg)
    if not logger.handlers:
        sys.stderr.write(msg)
    sys.exit(1)


def __build_path(config, fire, time):
    test_path = './fire/'
    test_path += getpass.getuser() + '/'
    test_path += config['title']['task'] + '/'
    test_path += time.strftime('%Y%m%d-%H%M%S') + '/'
    test_path +=  fire['name']
    return test_path


def main():
    #d
    import pprint
    pp = pprint.PrettyPrinter(indent=4)
    #d
    TESTS_PATH = './run'
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', nargs=1, action='store',
                    dest='config_file', default='./fire.yaml',
                    help='path to configuration file',)

    parser.add_argument('--debug', action="store_const", const=True,
            help='Whether to show debug msg in STDOUT', dest='debug')

    parser.add_argument('--version', action='version',
                    version='%(prog)s 0.0.1')
    args = parser.parse_args()


    logger = logging.getLogger('firebat.console')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    if args.debug:
        ch.setLevel(logging.DEBUG)
    else:
        ch.setLevel(logging.ERROR)
    formatter = logging.Formatter('%(asctime)s  %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    try:
        with open(args.config_file, 'r') as conf_fh:
            config = yaml.load(conf_fh)
    except IOError, e:
        exit_err('Could not read "%s": %s\n' % (args.config_file, e))
    except yaml.scanner.ScannerError, e:
        exit_err('Could not parse config file: %s\n%s' % (args.config_file, e))

    now = datetime.now()
    #pp.pprint(config)

    for f in config['fire']:
        path = __build_path(config, f, now)
        print make_conf(f)
    logger.debug('Job done.')

if __name__ == '__main__':
    main()
