#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
firebat.console
~~~~~~~~~~~~~~~

Helper script for Phantom load tool.
    * generate config files and input data.
    * runs test.
    * aggregate result data.
"""
import os
import sys
import argparse
import getpass
import copy
import daemon
import time
import pprint
pp = pprint.PrettyPrinter(indent=4)

import yaml
import simplejson as json
import validictory
import lockfile

from firebat import __version__
from firebat.console.conf import get_defaults, get_main_cfg
from firebat.console.cmd import list_running_jobs, kill_all
from firebat.console.proc import get_ammo, start_daemon, build_test
from firebat.console.helpers import validate, exit_err, get_logger,\
    test_cfg_complete, get_test_uniq_name, get_lock
from firebat.console.exceptions import FireEmergencyExit
from firebat.console.supervisor import run1
from firebat.clients import FirebatOverlordClient



#def build_path(orig_wd, config, fire, time):
#    test_path = orig_wd + '/'
#    test_path += config['title']['task'] + '_'
#    test_path += getpass.getuser() + '_'
#    test_path += time.strftime('%Y%m%d-%H%M%S') + '/'
#    test_path += fire['name']
#    return test_path


def get_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', action='store',
                    dest='config_file', default='./fire.yaml',
                    help='path to configuration file',)

    parser.add_argument('-a', '--ammo', action='store',
                    dest='ammo_file', default=None,
                    help='path to ammo file',)

    parser.add_argument('-i', '--isolated', action='store_const',
                    dest='isolated', const=True,
                    help='Do not call remote Firebat API.',)

    parser.add_argument('-o', '--only-prepare-stpd', action='store_const',
                    dest='stpd_ammo_only', const=True,
                    help='Only generate ammo stpd and exit',)

    parser.add_argument('-k', '--kill-all', action='store_const',
                    dest='kill_all', const=True,
                    help='Kill all running fires and exit',)

    parser.add_argument('--verify_cfg', action="store_const", const=True,
                    help='Verify cfg file, dumps it in JSON and exit',
                    dest='verify_cfg')

    parser.add_argument('--list', action="store_const", const=True,
            help='List details of currently running fires.', dest='list_only')

    parser.add_argument('--debug', action="store_const", const=True,
            help='Whether to show debug msg in STDOUT', dest='debug')

    parser.add_argument('--version', action='version',
            version='%(prog)s ' + __version__)
    return parser


def main():
    defaults = get_defaults()
    args = get_arg_parser().parse_args()
    logger = get_logger(is_debug=args.debug)
    main_cfg = get_main_cfg()

    if args.list_only:
        list_running_jobs()
        sys.exit(0)

    if args.kill_all:
        kill_all()
        sys.exit(0)

    isolated_mode = False  # Shud try to call fire-overloard API
    if not main_cfg:
        isolated_mode = True
        logger.debug('No valid main cfg, can\'t call remote API.')

    if args.stpd_ammo_only or args.isolated or args.verify_cfg:
        logger.debug('Working in isolated mode, without remote API calls.')
        isolated_mode = True

    # load job configuration.
    try:
        with open(args.config_file, 'r') as conf_fh:
            test_cfg = yaml.load(conf_fh)
    except IOError, e:
        exit_err('Could not read "%s": %s\n' % (args.config_file, e))
    except yaml.scanner.ScannerError, e:
        exit_err('Could not parse test config file: %s\n%s' %\
                 (args.config_file, e))
    
    # merge with default settings
    defaults['test_cfg'].update(test_cfg)
    test_cfg = defaults['test_cfg']
    for idx, fire in enumerate(test_cfg['fire']):
        f = copy.copy(defaults['fire_conf'])
        f.update(fire)
        test_cfg['fire'][idx] = f

    try:
        validate(test_cfg)
    except validictory.validator.ValidationError, e:
        exit_err('Error in parsing fire conf:\n%s' % e)

    if args.verify_cfg:  # cfg verification only, We no need to run tests
        sys.stdout.write(json.dumps(test_cfg, sort_keys=True, indent=4 * ' '))
        sys.exit(0)

    oc = None
    f_lck = open(main_cfg['LOCK_PATH'], "w")
    lck, err = get_lock(f_lck.fileno(), exclusive=test_cfg['exclusive_lck'])
    if lck: 
        logger.info('Lock acquired successfully')
        if not isolated_mode:  # call firebat API if We shud
            oc = FirebatOverlordClient(main_cfg['FIERBAT_API_URL'],
                                       main_cfg['FIERBAT_API_TO'])
            test_cfg = test_cfg_complete(test_cfg)
            retcode, resp = oc.registrate_new_test(test_cfg)
            if retcode:
                logger.info('Test registered successfully on remote side.')
                test_id = resp.get('test_id', None)
                if test_id:
                    test_cfg['id'] = int(test_id)
                fires_ids = resp.get('fires_ids', None)
                if fires_ids:
                    for idx, f_id in enumerate(fires_ids):
                        test_cfg['fire'][idx]['id'] = int(f_id)
            else:
                del oc
                exit_err('Firebat API call failed: %s' % resp)

    else:
        exit_err(['Lock allready acquired, tank is busy.', err])

    test_cfg['uniq_name'] = get_test_uniq_name(test_cfg)
    test_cfg['wd'] = '%s/%s' % (os.getcwd(), test_cfg['uniq_name'])

    if 'ammo' in test_cfg:
        test_cfg = get_ammo(test_cfg, arm_api_url=main_cfg['ARMORER_API_URL'])

    # build ammos and Phantom configs.
    try:
        build_test(test_cfg, args=args)
    except FireEmergencyExit, e:
        exit_err(str(e))

    if args.stpd_ammo_only:  # generation only, We no need to run tests
        sys.exit(0)

    if not os.path.exists(test_cfg['wd']):
        os.makedirs(test_cfg['wd'])

    # start Phantom supervisor daemon
    supervisor_ctx = daemon.DaemonContext(
        working_directory=test_cfg['wd'],
        umask=0o002,
    )
    supervisor_ctx.files_preserve = [f_lck]
   
    #d
    #pp.pprint(test_cfg)
    #pp.pprint(main_cfg)
 
    logger.info('Starting supervisor')
    with supervisor_ctx:
        run1(test_cfg, main_cfg)


        #logger = get_logger(log_path='%s/fire.log' % test_cfg['wd'],
        #                    name='supervisor')
        #logger.info('started')
        #logger.info(test_cfg)
        #time.sleep(120)
        #logger.info('exit')
    
        # call firebat API if We shud

    #for f in test_cfg['fire']:
    #    if oc:
    #        if not 'src_host' in f:
    #            f['src_host'] = test_cfg['src_host']
    #        retcode, err = oc.push_fire_updates(f['id'], fire_cfg=f,
    #                                            status='started')
    #        if not retcode:
    #            logger.error('Can\'t update fire on API side: %s' % err)
    #    retcode, out = start_daemon(f)
    #    if retcode == 0:
    #        logger.info('Fire %s launched successfully.' % f['name'])
    #    else:
    #        logger.error('Fire start fails: %s.Exit code: %s' % (out, retcode))

if __name__ == '__main__':
    main()
