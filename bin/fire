#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
firebat.console
~~~~~~~~~~~~~~~

Helper script for Phantom load tool.
    * generate config files and input data.
    * runs test.
    * aggregate result data.
"""

import sys
import argparse
import getpass

import yaml

from firebat import __version__
from firebat.console.conf import get_defaults, get_main_cfg
from firebat.console.cmd import get_logger, list_running_jobs, kill_all
from firebat.console.proc import start_daemon, build_test
from firebat.console.helpers import validate_dict, exit_err


def build_path(orig_wd, config, fire, time):
    test_path = orig_wd + '/'
    test_path += config['title']['task'] + '_'
    test_path += getpass.getuser() + '_'
    test_path += time.strftime('%Y%m%d-%H%M%S') + '/'
    test_path += fire['name']
    return test_path


def get_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', nargs=1, action='store',
                    dest='config_file', default='./fire.yaml',
                    help='path to configuration file',)

    parser.add_argument('-a', '--ammo', action='store',
                    dest='ammo_file', default=None,
                    help='path to ammo file',)

    parser.add_argument('-o', '--only-prepare-stpd', action='store_const',
                    dest='stpd_ammo_only', const=True,
                    help='Only generate ammo stpd and exit',)

    parser.add_argument('-k', '--kill-all', action='store_const',
                    dest='kill_all', const=True,
                    help='Kill all running fires and exit',)

    parser.add_argument('--list', action="store_const", const=True,
            help='List details of currently running fires.', dest='list_only')

    parser.add_argument('--debug', action="store_const", const=True,
            help='Whether to show debug msg in STDOUT', dest='debug')

    parser.add_argument('--version', action='version',
            version='%(prog)s ' + __version__)
    return parser


def main():
    defaults = get_defaults()
    args = get_arg_parser().parse_args()
    logger = get_logger(is_debug=args.debug)
    main_cfg = get_main_cfg(logger=logger)

    if args.list_only:
        list_running_jobs(logger=logger)
        sys.exit(0)

    if args.kill_all:
        kill_all(logger=logger)
        sys.exit(0)

    if not main_cfg:
        logger.warning('No valid main cfg, can\'t call remote API.')

    # load job configuration.
    try:
        with open(args.config_file, 'r') as conf_fh:
            config = yaml.load(conf_fh)
    except IOError, e:
        exit_err('Could not read "%s": %s\n' % (args.config_file, e))
    except yaml.scanner.ScannerError, e:
        exit_err('Could not parse config file: %s\n%s' % (args.config_file, e))

    try:
        validate_dict(config['title'], defaults['title_required_keys'])
    except ValueError, e:
        exit_err('Error in parsing fire conf:\n%s' % e)

    # build ammos and Phantom configs.
    build_test(config, defaults, args, logger=logger)

    if args.stpd_ammo_only:  # generation only, We no need to run tests
        sys.exit(0)

    # start Phantom supervisor daemon for each fire.
    for f in config['fire']:
        retcode, out = start_daemon(f)
        if retcode == 0:
            logger.info('Fire %s launched successfully.' % f['name'])
        else:
            logger.error('Fire start fails: %s.Exit code: %s' % (out, retcode))

if __name__ == '__main__':
    main()
